import React, { useState, useEffect } from "react";
import { Table, Form, Modal, Spinner } from "react-bootstrap";
import {
	Card,
	CardBody,
	CardHeader,
	CardHeaderToolbar,
} from "./../../_metronic/_partials/controls";
import { Button } from "@material-ui/core";
import "react-datepicker/dist/react-datepicker.css";
import Autocomplete from "@material-ui/lab/Autocomplete";
import { TextField } from "@material-ui/core";
import { fetchJSON } from "../../_metronic/_helpers/api";
import { BASE_URL } from "../../_metronic/_constants/endpoints";
import _ from "lodash";
import moment from "moment";
import { CSVLink } from "react-csv";
import { useHistory } from "react-router-dom";
import SnackbarComp from "../Components/SnackbarComp";
import { datePipe } from "../../_metronic/_helpers/date-pipe";
import SkeletonComp from "../Components/SkeletonComp";
import { Link, useLocation } from "react-router-dom";
import { Status } from "../../utils/helpers";
import { useSnapshot } from "valtio";
import { valtioState } from "../App";

export function LeadsPage(client) {
	const [show, setShow] = useState(false);

	const [type, setType] = useState("text");

	const [endDateType, setEndDateType] = useState("text");

	const [leads, setLeads] = useState([]);

	const [vertical, setVertical] = useState([]);

	const [regions, setRegions] = useState([]);

	const [principals, setPrincipals] = useState([]);

	const [activities, setActivities] = useState([]);

	const [selectedPrincipalId, setSelectedPrincipalId] = useState(null);

	const [formData, setFormData] = useState({});

	const [isEdit, setIsEdit] = useState(false);

	const [modal, setModal] = useState(false);

	const [fields, setFields] = useState([]);

	const [csvModal, setCSVModal] = useState(false);

	const [selectedPrincipalIdCSV, setSelectedPrincipalIdCSV] = useState(null);

	const [technology, setTechnology] = useState([]);

	const [totalValue, setTotalValue] = useState();

	const [clients, setClients] = useState([]);

	const [uploadCSVFile, setUploadCSVFile] = useState();

	const history = useHistory();

	const [isSuccess, setSuccess] = useState(false);
	const [message, setMessage] = useState(false);
	const [variant, setVariant] = useState("success");

	const [loader, setLoader] = useState(false);
	const [marketingYear, setMarketingYear] = useState(null);

	const location = useLocation();
	//csv
	const [csvStatus, setCsvStatus] = useState(Status.idle);

	//FILTERS STATES

	const [principalFilters, setPrincipalFilters] = useState("all");
	const [leadNameFilter, setLeadNameFilter] = useState("");
	const [startDateFilter, setStartDateFilter] = useState("");
	const [endDateFilter, setEndDateFilter] = useState("");
	const [verticalsFilter, setVerticalsFilter] = useState("");
	const [regionsFilter, setRegionsFilters] = useState("");
	const [leadTypeFilter, setLeadTypeFilter] = useState("");
	const [statusFilter, setStatusFilter] = useState("");
	const [generatedFilter, setGeneratedFilter] = useState("");
	const [convertFilter, setConvertFilter] = useState("");
	const [ageingDaysFilter, setAgeingDaysFilter] = useState("");
	const [campaignNameFilter, setcampaignNameFilter] = useState("");
	const [resetFilter, setResetFilter] = useState("");

	const [csvData, setCSVData] = useState([]);
	const [csvError, setCSVError] = useState("");

	const [splitRevenue, setSplitsRevenue] = useState([]);
	const [totalRevenue, setTotalRevenue] = useState({
		totalPrincipal: 0,
		totalOthers: 0,
		totalServices: 0,
		grandTotal: 0,
	});

	const csvSampleData = [
		[
			"Lead Name",
			"Vertical",
			"Region",
			"Monthly Value",
			"Campaign",
			"Campaign Name",
			"Lead Type",
			"Active",
			"Generated By",
		],
		[
			"John",
			"Agri-Tech Startups",
			"India South",
			"45665",
			"2020",
			"Campaign Name",
			"Product",
			"Yes",
			"Self",
		],
		[
			"John2",
			"Agri-Tech Startups",
			"India West",
			"87664",
			"2020",
			"Campaign Name",
			"Service",
			"No",
			"Vendor",
		],
	];

	function handleAdd(e) {
		e.preventDefault();
		let tempSR = [...splitRevenue];
		const user = JSON.parse(localStorage.getItem("user-details"));
		tempSR.push({
			monthlyRevenueOthers:
				tempSR.length === 0 && formData.isProduct === null
					? formData.monthlyProduct
					: 0,
			registerAddedBy: user.id,
			registerPartnerId: user.partnerId,
			registerPrincipalId: tempSR.length === 0 ? formData.principal : 0,
			revenuePrincipal:
				tempSR.length === 0 && formData.isProduct ? formData.monthlyProduct : 0,
			revenueServices:
				tempSR.length === 0 && formData.isProduct === false
					? formData.monthlyProduct
					: 0,
		});
		if (tempSR.length === 1) {
			setTotalRevenue({
				totalPrincipal: tempSR[0].revenuePrincipal,
				totalOthers: tempSR[0].monthlyRevenueOthers,
				totalServices: tempSR[0].revenueServices,
				grandTotal:
					tempSR[0].revenuePrincipal +
					tempSR[0].monthlyRevenueOthers +
					tempSR[0].revenueServices,
			});
		}
		setSplitsRevenue(tempSR);
		// const values = [...fields];
		// values.push({ value: null });
		// setFields(values);
	}

	function handleDelete(e) {
		let tempSR = [...splitRevenue];
		tempSR.splice(e, 1);
		setSplitsRevenue(tempSR);
	}

	const handleShow = () => {
		setShow(!show);
	};

	const showModal = () => {
		setModal(!modal);
	};

	const showCSVModal = () => {
		setCSVModal(!csvModal);
	};

	const getLeadsList = async () => {
		setLoader(true);
		setLeads([]);
		const user = localStorage.getItem("user-details");
		const partnerId = JSON.parse(user).partnerId;
		let params =
			principalFilters !== "" ? "?principal=" + principalFilters : "";
		params +=
			verticalsFilter !== "" ? "&industryVertical=" + verticalsFilter : "";
		params += regionsFilter !== "" ? "&salesRegion=" + regionsFilter : "";
		params += ageingDaysFilter !== "" ? "&ageingDays=" + ageingDaysFilter : "";
		params += convertFilter !== "" ? "&isConvert=" + convertFilter : "";
		params += leadTypeFilter !== "" ? "&isProduct=" + leadTypeFilter : "";
		params +=
			generatedFilter !== "" ? "&isSelfGenerated=" + generatedFilter : "";
		params +=
			campaignNameFilter !== "" ? "&marketingId=" + campaignNameFilter : "";
		params += statusFilter !== "" ? "&salesIsActive=" + statusFilter : "";
		params += startDateFilter ? "&startDate=" + startDateFilter : "";
		params += endDateFilter ? "&endDate=" + endDateFilter : "";
		params += leadNameFilter !== "" ? "&salesLeadName=" + leadNameFilter : "";
		params += marketingYear ? "&marketingYear=" + marketingYear : "";

		try {
			const res = await fetchJSON(
				BASE_URL +
					"/dashboard/sales/partner/" +
					partnerId +
					"/" +
					principalFilters +
					params
			);
			if (res) {
				setLeads(res);
				const csvData = [];
				res.map((item, i) => {
					csvData.push({
						"SL.No": i + 1,
						Name: item.salesLeadName,
						Campaign: item.campaign,
						"Lead Date": item.ageingDate,
						Vertical: findVerticalName(item.industryVertical),
						"Monthly Value": item.salesValue
							? item.salesValue.toLocaleString()
							: "",
						Region: findRegionName(item.salesRegion),
						Type: item.isProduct ? "Product" : "Service",
						Status: item.salesIsActive ? "Active" : "Inactive",
						"Generated By": item.isSelfGenerated ? "Self" : "Principal",
						"Added By": item.added_by,
						"Convert To Clients": item.isConvert ? "Converted" : "-",
					});
				});
				setCSVData(csvData);
				setLoader(false);
			}
		} catch (error) {}
	};

	const findVerticalName = item => {
		const data = vertical.find(ele => ele.id === item);
		return data ? data.verticalName : "-";
	};

	const findRegionName = item => {
		const region = regions.find(ele => ele.id === item);
		return region ? region.regionName : "-";
	};

	const getVerticalList = async () => {
		setVertical([]);
		const user = localStorage.getItem("user-details");
		const partnerId = JSON.parse(user).partnerId;
		try {
			const res = await fetchJSON(BASE_URL + "/verticals");
			if (res) {
				setVertical(res);
			}
		} catch (error) {}
	};

	const getRegionsList = async () => {
		setRegions([]);
		const user = localStorage.getItem("user-details");
		const partnerId = JSON.parse(user).partnerId;
		try {
			const res = await fetchJSON(BASE_URL + "/dashboard/regions");
			if (res) {
				setRegions(res);
			}
		} catch (error) {}
	};

	const getPrincipals = async () => {
		setPrincipals([]);
		const user = localStorage.getItem("user-details");
		const partnerId = JSON.parse(user).partnerId;
		try {
			const res = await fetchJSON(
				BASE_URL + "/dashboard/myorg/associations/principals/" + partnerId
			);
			if (res) {
				const uniquePrincipals = _.uniqBy(res, "principalId");
				setPrincipals(uniquePrincipals);
				//setPrincipals()
			}
		} catch (error) {}
	};

	const getTechnologyList = async () => {
		setTechnology([]);
		const res = await fetchJSON(BASE_URL + "/technologies");
		if (res) {
			setTechnology(res);
		}
	};

	const getMarketingActivityList = async e => {
		setActivities([]);
		setSelectedPrincipalId(e);

		const user = localStorage.getItem("user-details");
		const partnerId = JSON.parse(user).partnerId;
		try {
			const res = await fetchJSON(
				BASE_URL +
					"/dashboard/marketing/activites/" +
					partnerId +
					"/" +
					e +
					"/2021"
			);
			if (res !== "Error!") {
				setActivities(res);
				if (location.state && location.date) {
					setMarketingYear(location.date);
					let activity = res.find(item => item.activityName == location.state)
						?.id;
					setcampaignNameFilter(activity ? activity : "untagged");
				}
			}
		} catch (error) {}
	};

	const uploadCSV = async () => {
		if (!selectedPrincipalIdCSV) {
			setCSVError("please select principal");
			return;
		} else if (!uploadCSVFile) {
			setCSVError("please select file");
			return;
		}

		setCsvStatus(Status.pending);
		const user = localStorage.getItem("user-details");
		const partnerId = JSON.parse(user).partnerId;

		const userId = JSON.parse(user).id;

		const formData = new FormData();

		formData.append("added_by", userId);
		formData.append("file", uploadCSVFile);

		try {
			const res = await fetchJSON(
				BASE_URL +
					"/dashboard/sales/bulk-leads" +
					"/" +
					partnerId +
					"/" +
					selectedPrincipalIdCSV,
				{
					method: "POST",
					headers: {
						// "Content-Type": "application/vnd.ms-excel",
					},
					body: formData,
				}
			);
			if (res) {
				setSuccess(true);

				if (typeof res === "string" || !res?.successInsert.length) {
					setVariant("error");
					setMessage(
						typeof res === "string"
							? res
							: "Some of the emails were skipped, as they were already in use"
					);
				} else if (res.successInsert.length) {
					setVariant("success");
					setMessage("File uploaded successfully");
				}

				setCsvStatus(Status.resolved);

				getLeadsList();
				showCSVModal(!csvModal);
			}
		} catch (error) {
			setCsvStatus(Status.rejected);
		}
		setUploadCSVFile("");
		// setSelectedPrincipalIdCSV("");
	};

	const addLeads = async () => {
		const user = localStorage.getItem("user-details");
		const partnerId = JSON.parse(user).partnerId;

		const userId = JSON.parse(user).id;

		const objToSend = {
			marketingId: formData.campaignName,
			salesIsActive: formData.active,
			isLeadFromPrincipal: formData.lead,
			isSelfGenerated: formData.lead,
			isProduct: formData.leadType,
			ageingDate: formData.leadDate,
			ageingDays: formData.days,
			salesLeadName: formData.name,
			industryVertical: {
				id: formData.verticalId,
				verticalName: formData.vertical,
				createdAt: new Date(),
				updatedAt: new Date(),
			},
			salesRegion: formData.region,
			salesValue: formData.monthlyValue,
			marketingYear: formData.year,
			campaignYear: formData.year,
			salesComments: formData.comments,
			salesPartnerId: partnerId,
			salesPrincipalId: Number(formData.principal),
			generatedBy: userId,
		};
		try {
			const res = await fetchJSON(BASE_URL + "/dashboard/sales", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(objToSend),
			});
			if (res) {
				setSuccess(true);
				setMessage("Added Successfully");
				getLeadsList();
				setShow(!show);
			}
		} catch (error) {}
	};

	const updateLeads = async () => {
		const user = localStorage.getItem("user-details");
		const userId = JSON.parse(user).id;

		const objToSend = {
			added_by: formData.addBy,
			isConvert: formData.convert,
			createdAt: new Date(),
			updatedAt: new Date(),
			marketingId: formData.campaignName,
			id: formData.id,
			salesIsActive: formData.active,
			isLeadFromPrincipal: formData.lead,
			isSelfGenerated: formData.lead,
			isProduct: formData.leadType,
			ageingDate: formData.leadDate,
			ageingDays: formData.days,
			salesLeadName: formData.name,
			industryVertical: {
				id: formData.verticalId,
				verticalName: formData.vertical,
				createdAt: new Date(),
				updatedAt: new Date(),
			},
			salesRegion: formData.region,
			salesValue: formData.monthlyValue,
			marketingYear: formData.year,
			campaignYear: formData.year,
			salesComments: formData.comments,
			salesPartnerId: formData.partnerId,
			salesPrincipalId: Number(formData.principal),
			generatedBy: userId,
		};
		try {
			const res = await fetchJSON(BASE_URL + "/dashboard/sales", {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(objToSend),
			});
			if (res) {
				setSuccess(true);
				setMessage("Updated Successfully");
				getLeadsList();
				setShow(!show);
			} else {
				setSuccess(true);
				setMessage("Something Went Wrong");
			}
		} catch (error) {}
	};

	// const getClientsList = async (e) => {
	//   setClients([]);
	//   const user = localStorage.getItem("user-details");
	//   const partnerId = JSON.parse(user).partnerId;
	//   console.log("hi");
	//   const res = await fetchJSON(
	//     BASE_URL +
	//       "/dashboard/clients/partner/" +
	//       partnerId +
	//       "/all?principal=all"
	//   );
	//   if (res) {
	//     console.log(res);
	//     setClients(res);
	//   }
	// };

	const addConvertToRevenue = async () => {
		const user = localStorage.getItem("user-details");
		const userId = JSON.parse(user).id;

		const objToSend = {
			isOngoing: formData.active,
			clientName: formData.name,
			region: formData.nameRegion,
			revenuePrincipal: splitRevenue[0] && splitRevenue[0].revenuePrincipal,
			startDate: formData.Date,
			principalId: Number(formData.principal),
			industryVertical: vertical.find(ele => ele.id == formData.verticalId),
			servicesDeployedManaged: formData.technology
				? [
						...formData.technology.map(item => {
							return {
								id: technology[0].technologyName.indexOf(item),
								text: item,
							};
						}),
				  ]
				: [],
			clientAddress: formData.address,
			clientPincode: formData.pinCode,
			partnerId: formData.partnerId,
			splitRevenue: splitRevenue,
			type: formData.convertType,
			salesRef: formData.salesRef ? formData.salesRef : null,
			type: "converttorevenue",
		};

		try {
			const res = await fetchJSON(BASE_URL + "/dashboard/clients", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(objToSend),
			});
			if (res) {
				getLeadsList();
				setShow(!show);
				setSuccess(true);
				setMessage("Converted Successfully");
				history.push("/clients");
			}
		} catch (error) {}
	};

	const handleConvertClick = item => {
		setIsEdit(true);
		setSplitsRevenue([]);
		setFormData({
			active: item.salesIsActive,
			name: item.salesLeadName,
			nameRegion: item.salesRegion,
			monthlyProduct: item.salesValue,
			industryVertical: {
				vertical: item.verticalName,
			},
			verticalId: item.industryVertical,
			principal: item.salesPrincipalId,
			partnerId: item.salesPartnerId,
			salesRef: item.id,
			technology: item.technology,
			Date: item.startDate,
			convertType: item.isConvert,
			monthlyValue: item.monthlyRevenueOthers,
			monthlyService: item.revenueServices,
			isProduct: item.isProduct,
		});
		showModal(true);
	};

	const handleRowClick = item => {
		setIsEdit(true);
		getMarketingActivityList(item.salesPrincipalId);
		setFormData({
			id: item.id,
			active: item.salesIsActive,
			lead: item.isLeadFromPrincipal,
			campaignName: item.marketingId,
			addBy: item.added_by,
			convert: item.isConvert,
			lead: item.isSelfGenerated,
			leadType: item.isProduct,
			leadDate: item.ageingDate,
			days: item.ageingDays,
			name: item.salesLeadName,
			industryVertical: {
				vertical: item.verticalName,
			},
			verticalId: item.industryVertical,
			region: item.salesRegion,
			monthlyValue: item.salesValue,
			year: item.marketingYear,
			comments: item.salesComments,
			principal: item.salesPrincipalId,
			salesRef: item.id,
			partnerId: item.salesPartnerId,
			technology: item.servicesDeployedManaged
				? [
						...item.servicesDeployedManaged.map(ele => {
							return ele.text;
						}),
				  ]
				: [],
		});
		setShow(true);
	};

	const handleSubmit = async e => {
		e.preventDefault();
		if (isEdit) {
			updateLeads();
		} else {
			addLeads();
		}
	};

	const getDiff = date => {
		return moment(new Date()).diff(date, "days");
	};

	const applyFilter = () => {
		getLeadsList();
	};

	const calculateRevenue = async () => {
		let totalPrincipal = 0;
		let totalServices = 0;
		let totalOthers = 0;
		let grandTotal = 0;

		await splitRevenue.forEach(ele => {
			totalPrincipal = totalPrincipal + ele.revenuePrincipal;
			console.log(totalPrincipal);
			totalServices = totalServices + ele.revenueServices;
			totalOthers = totalOthers + ele.monthlyRevenueOthers;
			grandTotal = totalPrincipal + totalOthers + totalServices;
		});

		setTotalRevenue({
			totalPrincipal: totalPrincipal,
			totalOthers: totalOthers,
			totalServices: totalServices,
			grandTotal: grandTotal,
		});
	};

	const resetButtonClick = () => {
		setPrincipalFilters("all");
		setResetFilter("true");

		setLeadNameFilter("");
		setStartDateFilter("");
		setEndDateFilter("");
		setVerticalsFilter("");
		setRegionsFilters("");
		setLeadTypeFilter("");
		setStatusFilter("");
		setGeneratedFilter("");
		setConvertFilter("");
		setAgeingDaysFilter("");
		setcampaignNameFilter("");
		setResetFilter("true");
	};

	const onChangeFile = event => {
		setUploadCSVFile(event.target.files[0]);
		setCSVError("");
	};

	// let tempValue= 0;
	// tempValue =  formData.monthlyValue + formData.serviceValue + formData.otherValue
	// setTotalValue(tempValue);

	useEffect(() => {
		setLoader(true);
		getRegionsList();
		getVerticalList();
		getPrincipals();
		getTechnologyList();
		// getClientsList();
		getMarketingActivityList("all");
	}, []);

	useEffect(() => {
		if (resetFilter === "true") {
			getLeadsList();
			setResetFilter("false");
		}
	}, [resetFilter]);

	useEffect(() => {
		if (
			vertical.length &&
			regions.length &&
			location.state === null &&
			location.date === undefined
		) {
			getLeadsList();
		}
	}, [vertical, regions]);
	useEffect(() => {
		if (campaignNameFilter && marketingYear) {
			applyFilter();
		}
	}, [campaignNameFilter]);

	const snap = useSnapshot(valtioState);

	return (
		<>
			<Card className="card-box expand-card">
				<CardHeader title="Leads">
					<CardHeaderToolbar>
						{snap.navRoles?.leads?.add ? (
							<Button
								type="submit"
								className="btn btn-light-primary font-weight-bolder"
								onClick={() => {
									setIsEdit(false);
									setFormData({});
									handleShow();
								}}
								style={{
									marginRight: "10px",
								}}
							>
								Add +
							</Button>
						) : null}
						<Button
							type="submit"
							className="btn btn-light-success font-weight-bolder"
							onClick={() => {
								showCSVModal();
							}}
						>
							Upload CSV
						</Button>
						<CSVLink
							className="btn btn-light-warning ml-3 csv-btn font-weight-bolder"
							filename={"leads.csv"}
							data={csvData}
						>
							Export to CSV
						</CSVLink>
					</CardHeaderToolbar>
				</CardHeader>
				<div className="card-spacer bg-white">
					<div className="row">
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlSelect1">
									<Form.Control
										as="select"
										value={principalFilters}
										onChange={e => setPrincipalFilters(e.target.value)}
									>
										<option selected={true} value="" className="default-option">
											Select Vendor
										</option>
										<option value="all">All</option>
										{principals &&
											principals.map(item => {
												return (
													<option value={item.principalId}>
														{item.principalName}
													</option>
												);
											})}
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlInput1">
									<Form.Control
										type="text"
										placeholder="Name"
										value={leadNameFilter}
										onChange={e => setLeadNameFilter(e.target.value)}
									/>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlInput1">
									<Form.Control
										type={type}
										onFocus={() => setType("date")}
										onBlur={() => setType("text")}
										placeholder="Start Date"
										value={startDateFilter}
										onChange={e => setStartDateFilter(e.target.value)}
									/>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlInput1">
									<Form.Control
										type={endDateType}
										placeholder="End Date"
										onFocus={() => setEndDateType("date")}
										onBlur={() => setEndDateType("text")}
										value={endDateFilter}
										onChange={e => setEndDateFilter(e.target.value)}
									/>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlInput1">
									<Form.Control
										as="select"
										value={verticalsFilter}
										onChange={e => setVerticalsFilter(e.target.value)}
									>
										<option selected="true" value="" className="default-option">
											Vertical
										</option>
										{vertical &&
											vertical.map(item => {
												return (
													<option value={item.id}>{item.verticalName}</option>
												);
											})}
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlInput1">
									<Form.Control
										as="select"
										value={regionsFilter}
										onChange={e => setRegionsFilters(e.target.value)}
									>
										<option selected="true" value="" className="default-option">
											Region
										</option>
										{regions &&
											regions.map(region => {
												return (
													<option value={region.id}>{region.regionName}</option>
												);
											})}
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlSelect1">
									<Form.Control
										as="select"
										value={leadTypeFilter}
										onChange={e => setLeadTypeFilter(e.target.value)}
									>
										<option selected="true" value="" className="default-option">
											Lead Type
										</option>
										<option value="all">All</option>
										<option value={"true"}>Product</option>
										<option value={"false"}>Service</option>
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlSelect1">
									<Form.Control
										as="select"
										value={statusFilter}
										onChange={e => setStatusFilter(e.target.value)}
									>
										<option selected="true" value="" className="default-option">
											Status
										</option>
										<option value="all">All</option>
										<option value={"true"}>Active</option>
										<option value={"false"}>Inactive</option>
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlSelect1">
									<Form.Control
										as="select"
										value={generatedFilter}
										onChange={e => setGeneratedFilter(e.target.value)}
									>
										<option selected="true" value="" className="default-option">
											Generated By
										</option>
										<option value="all">All</option>
										<option value={"true"}>Self</option>
										<option value={"false"}>Vendor</option>
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form.Group controlId="exampleForm.ControlSelect1">
								<Form.Control
									as="select"
									value={convertFilter}
									onChange={e => setConvertFilter(e.target.value)}
								>
									<option selected="true" value="" className="default-option">
										Converted To Client
									</option>
									<option value={"true"}>Yes</option>
									<option value={"false"}>No</option>
								</Form.Control>
							</Form.Group>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlSelect1">
									<Form.Control
										as="select"
										value={ageingDaysFilter}
										onChange={e => setAgeingDaysFilter(e.target.value)}
									>
										<option selected="true" value="" className="default-option">
											Ageing Days
										</option>
										<option value={"0_30"}>0-30</option>
										<option value={"31_60"}>31-60</option>
										<option value={"61_90"}>61-90</option>
										<option value={"90"}> 90 </option>
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
						<div className="col-lg-2">
							<Form>
								<Form.Group controlId="exampleForm.ControlSelect1">
									<Form.Control
										as="select"
										value={campaignNameFilter}
										onChange={e => setcampaignNameFilter(e.target.value)}
									>
										<option selected="true" value="" className="default-option">
											Campaign
										</option>
										{activities &&
											activities.map(item => (
												<option value={item.id}>{item.activityName}</option>
											))}
									</Form.Control>
								</Form.Group>
							</Form>
						</div>
					</div>
				</div>

				<div className="d-flex justify-content-end filter-btn">
					<Button
						type="submit"
						className="btn btn-light-info font-weight-bolder mr-2"
						onClick={() => applyFilter()}
					>
						Apply
					</Button>
					<Button
						type="submit"
						className="btn btn-light-danger font-weight-bolder mr-4"
						onClick={() => resetButtonClick()}
					>
						Reset
					</Button>
				</div>

				<CardBody>
					<div className="table-container">
						<Table>
							<div className="table-body">
								<thead>
									<tr>
										<th className="table-text">Name </th>
										<th className="table-text">Campaign</th>
										<th className="table-text">Lead Date</th>
										<th className="table-text">Vertical</th>
										<th className="table-text">
											Value ({" "}
											{JSON.parse(localStorage.getItem("user-details"))?.Partner
												?.Currency?.currencyCode === "USD" ? (
												"$"
											) : (
												<span className="rupee-symbol">₹</span>
											)}
											)
										</th>
										{/* <th className="table-text">Region</th> */}
										{/* <th className="table-text">Type</th> */}
										{/* <th className="table-text">Status</th> */}
										{/* <th className="table-text" width="100">
                      Generated By
                  </th> */}
										<th className="table-text">Added By</th>
										<th className="table-text">Convert To Clients</th>
									</tr>
								</thead>
								<tbody>
									{loader ? (
										<SkeletonComp rows={8} columns={7}></SkeletonComp>
									) : (
										<React.Fragment>
											{leads.length > 0 ? (
												leads.map(item => {
													return (
														<tr>
															<td
																style={{
																	cursor: "pointer",
																}}
																onClick={e => handleRowClick(item)}
															>
																{item.salesLeadName}
															</td>
															<td
																style={{
																	cursor: "pointer",
																}}
																onClick={e => handleRowClick(item)}
															>
																{item.campaign}
															</td>
															<td>{datePipe(item.ageingDate)}</td>
															<td
																style={{
																	cursor: "pointer",
																}}
																onClick={e => handleRowClick(item)}
															>
																{vertical &&
																	vertical.map(ele => {
																		if (ele.id == item.industryVertical) {
																			return ele.verticalName;
																		}
																	})}
															</td>
															<td>
																{item.salesValue
																	? item.salesValue.toLocaleString()
																	: ""}
															</td>

															{/* <td>
                                {regions &&
                                  regions.map((ele) => {
                                    if (ele.id == item.salesRegion) {
                                      return ele.regionName;
                                    }
                                  })}{" "}
                              </td> */}
															{/* <td>
                                <span
                                  className={`label label-lg label-light-${item.isProduct ? "warning" : "primary"
                                    } label-inline`}
                                >
                                  {item.isProduct ? "Product" : "Service"}
                                </span>
                              </td> */}
															{/* <td>
                                <span
                                  className={`label label-lg label-light-${item.salesIsActive ? "success" : "danger"
                                    } label-inline`}
                                >
                                  {item.salesIsActive ? "Active" : "Inactive"}
                                </span>
                              </td> */}
															{/* <td>
                                <span
                                  className={`label label-lg label-light-${item.isSelfGenerated ? "link" : "info"
                                    } label-inline`}
                                >
                                  {item.isSelfGenerated ? "Self" : "Principal"}
                                </span>
                              </td> */}
															<td>{item.added_by}</td>
															<td>
																{item.isConvert ? (
																	<span className="label label-md label-light-success label-inline">
																		Converted
																	</span>
																) : (
																	<span
																		className="label label-inline label-md label-light-danger"
																		style={{
																			cursor: "pointer",
																		}}
																		onClick={() => {
																			showModal();
																			handleConvertClick(item);
																		}}
																	>
																		Convert
																	</span>
																)}
															</td>
														</tr>
													);
												})
											) : (
												<div className="my-4">
													{!loader && "No records found"}
												</div>
											)}
										</React.Fragment>
									)}
								</tbody>
							</div>
						</Table>
					</div>
					{/* <Pagination className="float-right">{items}</Pagination> */}
				</CardBody>
			</Card>

			{/* MODAL 1 STARTS HERE*/}

			<Modal size="lg" show={show} onHide={handleShow}>
				<Form onSubmit={e => handleSubmit(e)}>
					<Modal.Header closeButton>
						<Modal.Title>Lead Details</Modal.Title>
					</Modal.Header>
					<Modal.Body>
						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Lead Name *</Form.Label>
							<Form.Control
								type="name"
								placeholder=""
								name="name"
								required
								disabled={(isEdit && !formData.active) || formData.isConvert}
								onChange={e =>
									setFormData({
										...formData,
										name: e.target.value,
									})
								}
								value={formData.name}
							/>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Select Vertical *</Form.Label>
							<Form.Control
								as="select"
								name="vertical"
								value={formData.verticalId}
								disabled={(isEdit && !formData.active) || formData.isConvert}
								required
								onChange={e =>
									setFormData({
										...formData,
										vertical: vertical.find(item => item.id == e.target.value)
											.verticalName,
										verticalId: e.target.value,
									})
								}
							>
								<option selected="true" disabled="disabled">
									Select a Vertical
								</option>
								{vertical &&
									vertical.map(item => {
										return <option value={item.id}>{item.verticalName}</option>;
									})}
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Country / Region(s) *</Form.Label>
							<Form.Control
								as="select"
								name="region"
								required
								disabled={(isEdit && !formData.active) || formData.isConvert}
								onChange={e =>
									setFormData({
										...formData,
										region: e.target.value,
									})
								}
								value={formData.region}
							>
								<option selected="true" disabled="disabled">
									Select Region
								</option>
								{regions &&
									regions.map(region => {
										return (
											<option value={region.id}>{region.regionName}</option>
										);
									})}
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="validationCustom02">
							<Form.Label>Lead Date *</Form.Label>

							<Form.Control
								required
								type="date"
								placeholder="Lead Date"
								name="leadDate"
								disabled={(isEdit && !formData.active) || formData.isConvert}
								max={moment(new Date()).format("YYYY-MM-DD")}
								onChange={e => {
									console.log(e.target.value, new Date());
									setFormData({
										...formData,
										leadDate: e.target.value,
										days: getDiff(e.target.value),
									});
								}}
								value={formData.leadDate}
							/>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Ageing (In days)</Form.Label>
							<Form.Control
								type="name"
								placeholder=""
								style={{
									cursor: "not-allowed",
								}}
								disabled
								name="days"
								onChange={e => setFormData({ ...formData })}
								value={formData.days}
							/>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>
								Monthly Value ({" "}
								{JSON.parse(localStorage.getItem("user-details"))?.Partner
									?.Currency?.currencyCode === "USD" ? (
									"$"
								) : (
									<span className="rupee-symbol">₹</span>
								)}
								) *
							</Form.Label>

							<Form.Control
								type="number"
								placeholder=""
								name="monthlyValue"
								disabled={(isEdit && !formData.active) || formData.isConvert}
								onChange={e =>
									setFormData({
										...formData,
										monthlyValue: e.target.value,
									})
								}
								value={formData.monthlyValue}
							/>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Vendor *</Form.Label>
							<Form.Control
								as="select"
								name="principal"
								disabled={(isEdit && !formData.active) || formData.isConvert}
								required
								onChange={e => {
									getMarketingActivityList(e.target.value);
									{
										setFormData({
											...formData,
											principal: e.target.value,
										});
									}
								}}
								value={formData.principal}
								// value={formData.principal}
							>
								<option selected="true" disabled="disabled">
									Select Vendor
								</option>
								{principals.map(e => (
									<option value={e.principalId}>{e.principalName}</option>
								))}
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlSelect2">
							<Form.Label>Select Campaign Year *</Form.Label>
							<Form.Control
								as="select"
								name="year"
								disabled={(isEdit && !formData.active) || formData.isConvert}
								required
								onChange={e =>
									setFormData({
										...formData,
										year: e.target.value,
									})
								}
								value={formData.year}
							>
								<option>Select Year</option>
								<option>2022</option>
								<option>2021</option>
								<option>2020</option>
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlSelect2">
							<Form.Label>Select Campaign Name *</Form.Label>
							<Form.Control
								as="select"
								name="campaignName"
								required
								disabled={(isEdit && !formData.active) || formData.isConvert}
								value={formData.campaignName}
								onChange={e =>
									setFormData({
										...formData,
										campaignName: e.target.value,
									})
								}
							>
								<option></option>
								{activities &&
									activities.map(item => (
										<option value={item.id}>{item.activityName}</option>
									))}
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlTextarea1">
							<Form.Label>Comment</Form.Label>
							<Form.Control
								as="textarea"
								rows="3"
								disabled={(isEdit && !formData.active) || formData.isConvert}
								name="comments"
								onChange={e =>
									setFormData({
										...formData,
										comments: e.target.value,
									})
								}
								value={formData.comments}
							/>
						</Form.Group>

						{/* RADIO BUTTON STARTS */}
						<Form.Label>Lead Type</Form.Label>
						{/* 1 */}
						<div key={`default-1`} className="mb-3">
							<Form.Group controlId="exampleForm.ControlInput1">
								<Form.Check
									inline
									disabled={(isEdit && !formData.active) || formData.isConvert}
									type={"radio"}
									name="leadType"
									label={`Product`}
									onChange={e =>
										setFormData({
											...formData,
											leadType: true,
										})
									}
									checked={formData.leadType}
								/>

								<Form.Check
									inline
									name="leadType"
									disabled={(isEdit && !formData.active) || formData.isConvert}
									type={"radio"}
									label={`Service`}
									onChange={e =>
										setFormData({
											...formData,
											leadType: false,
										})
									}
									checked={formData.leadType === false}
								/>
							</Form.Group>
						</div>
						{/* 2 */}
						<Form.Label>Active</Form.Label>

						<div key={`default-1`} className="mb-3">
							<Form.Group controlId="exampleForm.ControlInput1">
								<Form.Check
									inline
									type={"radio"}
									name="active"
									label={`Yes`}
									disabled={formData.convert}
									onChange={e =>
										setFormData({
											...formData,
											active: true,
										})
									}
									checked={formData.active}
								/>

								<Form.Check
									inline
									name="active"
									type={"radio"}
									label={`No`}
									disabled={formData.convert}
									onChange={e =>
										setFormData({
											...formData,
											active: false,
										})
									}
									checked={formData.active === false}
								/>
							</Form.Group>
						</div>

						{/* 3 */}
						<Form.Label>Lead Generated By</Form.Label>

						<div key={`default-1`} className="mb-3">
							<Form.Group controlId="exampleForm.ControlInput1">
								<Form.Check
									inline
									type={"radio"}
									disabled={(isEdit && !formData.active) || formData.isConvert}
									name="lead"
									label={`Self`}
									onChange={e =>
										setFormData({
											...formData,
											lead: true,
										})
									}
									checked={formData.lead}
								/>

								<Form.Check
									inline
									name="lead"
									type={"radio"}
									disabled={(isEdit && !formData.active) || formData.isConvert}
									label={`Vendor`}
									onChange={e =>
										setFormData({
											...formData,
											lead: false,
										})
									}
									checked={formData.lead === false}
								/>
							</Form.Group>
						</div>

						{/* RADIO BUTTON ENDS */}
					</Modal.Body>
					<Modal.Footer>
						<Button
							variant="danger"
							onClick={handleShow}
							className="btn btn-light-danger font-weight-bolder mr-5"
						>
							Close
						</Button>

						{snap.navRoles?.leads?.edit && isEdit ? (
							<Button
								variant="primary"
								type="submit"
								disabled={(isEdit && !formData.active) || formData.isConvert}
								className="btn btn-light-primary font-weight-bolder"
							>
								Update
							</Button>
						) : snap.navRoles?.leads?.add ? (
							<Button
								variant="primary"
								type="submit"
								disabled={(isEdit && !formData.active) || formData.isConvert}
								className="btn btn-light-primary font-weight-bolder"
							>
								Add
							</Button>
						) : null}
					</Modal.Footer>
				</Form>
			</Modal>

			{/* MODAL 1 ENDS HERE*/}

			{/* {MODAL 2 STARTS HERE} */}

			<Modal size="lg" show={modal} onHide={showModal}>
				<Modal.Header closeButton>
					<Modal.Title>Convert To Clients</Modal.Title>
				</Modal.Header>
				<Modal.Body>
					<Form>
						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Client Name *</Form.Label>
							<Form.Control
								type="name"
								placeholder=""
								name="name"
								required
								value={formData.name}
								onChange={e =>
									setFormData({
										...formData,
										name: e.target.value,
									})
								}
							/>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Vendor *</Form.Label>
							<Form.Control
								as="select"
								name="principal"
								required
								value={formData.principal}
								onChange={e =>
									setFormData({
										...formData,
										principal: e.target.value,
									})
								}
								value={formData.principal}
							>
								<option selected="true" disabled="disabled">
									Select Vendor
								</option>
								{principals.map(e => (
									<option value={e.principalId}>{e.principalName}</option>
								))}
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Select Vertical *</Form.Label>
							<Form.Control
								as="select"
								name="vertical"
								required
								value={formData.verticalId}
								onChange={e =>
									setFormData({
										...formData,
										vertical: e.target.textContent,
										verticalId: e.target.value,
									})
								}
							>
								<option selected="true" disabled="disabled">
									Select a Vertical
								</option>
								{vertical &&
									vertical.map(item => {
										return <option value={item.id}>{item.verticalName}</option>;
									})}
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Country / Region(s) *</Form.Label>
							<Form.Control
								as="select"
								name="nameRegion"
								required
								value={formData.nameRegion}
								onChange={e =>
									setFormData({
										...formData,
										nameRegion: e.target.value,
									})
								}
							>
								<option selected="true" disabled="disabled">
									Select Region
								</option>
								{regions &&
									regions.map(region => {
										return (
											<option value={region.id}>{region.regionName}</option>
										);
									})}
							</Form.Control>
						</Form.Group>

						<Form.Group controlId="validationCustom02">
							<Form.Label>Start Date *</Form.Label>

							<Form.Control
								required
								type="date"
								name="Date"
								required
								max={moment(new Date()).format("YYYY-MM-DD")}
								value={formData.Date}
								onChange={e =>
									setFormData({
										...formData,
										Date: e.target.value,
									})
								}
							/>
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlTextarea1">
							<Form.Label>Address</Form.Label>
							<Form.Control
								as="textarea"
								rows="3"
								name="address"
								onChange={e =>
									setFormData({
										...formData,
										address: e.target.value,
									})
								}
								value={formData.address}
							/>
						</Form.Group>

						<Form.Group controlId="validationCustom02">
							<Form.Label>PIN/Zip Code *</Form.Label>

							<Form.Control
								required
								type="number"
								name="pinCode"
								onChange={e =>
									setFormData({
										...formData,
										pinCode: e.target.value,
									})
								}
								value={formData.pinCode}
							/>
						</Form.Group>

						<Form.Group>
							<Form.Label>Service Deployed *</Form.Label>
							<Autocomplete
								multiple
								name="technology"
								required
								options={technology[0]?.technologyName}
								getOptionLabel={option => option}
								onChange={(e, value) =>
									setFormData({
										...formData,
										technology: value,
									})
								}
								renderInput={params => (
									<TextField
										{...params}
										variant="outlined"
										placeholder="Sectoral Focus"
									/>
								)}
							/>
						</Form.Group>
						<h6>Revenue Split *</h6>
						{fields.length < 3 ? (
							<button
								className="btn btn-light-info mt-3 mb-3"
								onClick={e => handleAdd(e)}
							>
								Add Vendor
							</button>
						) : (
							""
						)}
						{splitRevenue &&
							splitRevenue.map((item, index) => {
								return (
									<div className="d-flex justify-content-between ml-1">
										<div className="row">
											<div className="col-4">
												<Form.Group controlId="exampleForm.ControlInput1">
													<Form.Label></Form.Label>
													<Form.Control
														as="select"
														className="mt-2"
														name="principal"
														onChange={e => {
															let tempSR = [...splitRevenue];
															tempSR[index].registerPrincipalId = parseInt(
																e.target.value,
																10
															);
															setSplitsRevenue(tempSR);
														}}
														value={splitRevenue[index].registerPrincipalId}
													>
														<option selected="true" disabled="disabled">
															Select Vendor
														</option>
														{principals.map(e => (
															<option value={e.principalId}>
																{e.principalName}
															</option>
														))}
													</Form.Control>
												</Form.Group>
											</div>
											<div className="col-2">
												<Form.Group controlId="validationCustom02">
													<Form.Label>Product</Form.Label>

													<Form.Control
														required
														type="number"
														name="monthlyValue"
														value={splitRevenue[index].revenuePrincipal}
														onChange={e => {
															let tempSR = [...splitRevenue];
															tempSR[index].revenuePrincipal = e.target.value
																? parseInt(e.target.value, 10)
																: 0;
															setSplitsRevenue(tempSR);
															calculateRevenue();
														}}
													/>
												</Form.Group>
											</div>
											<div className="col-2">
												<Form.Group controlId="validationCustom02">
													<Form.Label>Services</Form.Label>

													<Form.Control
														required
														type="number"
														placeholder="0"
														name="serviceValue"
														value={splitRevenue[index].revenueServices}
														onChange={e => {
															let tempSR = [...splitRevenue];
															tempSR[index].revenueServices = e.target.value
																? parseInt(e.target.value, 10)
																: 0;
															setSplitsRevenue(tempSR);
															calculateRevenue();
														}}
													/>
												</Form.Group>
											</div>
											<div className="col-2">
												<Form.Group controlId="validationCustom02">
													<Form.Label>Others</Form.Label>

													<Form.Control
														required
														type="number"
														placeholder="0"
														name="otherValue"
														value={splitRevenue[index].monthlyRevenueOthers}
														onChange={e => {
															let tempSR = [...splitRevenue];
															tempSR[index].monthlyRevenueOthers = e.target
																.value
																? parseInt(e.target.value, 10)
																: 0;
															setSplitsRevenue(tempSR);
															calculateRevenue();
														}}
													/>
												</Form.Group>
											</div>
											<div className="col-2">
												<div className="mt-10">
													<i
														className="fa fa-trash"
														style={{
															cursor: "pointer",
															color: "#F64E60",
														}}
														onClick={() => handleDelete(index)}
													></i>
												</div>
											</div>
										</div>
									</div>
								);
							})}
						{splitRevenue.length > 0 && (
							<div className="row">
								<div className="col-4">
									<label className="mt-1 ml-2 text-dark"></label>
								</div>
								<div className="col-2">
									<label className="mt-1 ml-2 text-dark">
										{totalRevenue.totalPrincipal}
									</label>
								</div>
								<div className="col-2">
									<label className="mt-1 ml-2 text-dark">
										{totalRevenue.totalServices}
									</label>
								</div>
								<div className="col-2">
									<label className="mt-1 ml-2 text-dark">
										{totalRevenue.totalOthers}
									</label>
								</div>
								<div className="col-2">
									<label className="mt-1 ml-2 text-dark"></label>
								</div>
							</div>
						)}

						<div className="text-right">
							<h5>
								Grand Total:
								{totalRevenue.grandTotal}
							</h5>
						</div>
					</Form>
				</Modal.Body>
				<Modal.Footer>
					<Button
						variant="danger"
						onClick={showModal}
						className="btn btn-light-danger font-weight-bolder mr-5"
					>
						Close
					</Button>

					<Button
						variant="primary"
						onClick={addConvertToRevenue}
						disabled={splitRevenue.length === 0}
						className="btn btn-light-primary font-weight-bolder"
					>
						Save
					</Button>
				</Modal.Footer>
			</Modal>

			{/* {MODAL 2 ENDS HERE} */}

			{/* {MODAL 3 STARTS HERE} */}

			<Modal size="lg" show={csvModal} onHide={showCSVModal}>
				<Modal.Header closeButton>
					<Modal.Title>Lead Details</Modal.Title>
				</Modal.Header>
				<Modal.Body>
					<Form>
						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Vendor *</Form.Label>
							<Form.Control
								as="select"
								name="principal"
								value={selectedPrincipalIdCSV}
								onChange={e => {
									setSelectedPrincipalIdCSV(e.target.value);

									setFormData({
										...formData,
										principal: e.target.value,
									});
									setCSVError("");
								}}
							>
								<option selected="true" disabled="disabled">
									Select Vendor
								</option>
								{principals.map(e => (
									<option value={e.principalId}>{e.principalName}</option>
								))}
							</Form.Control>
							{csvError.includes("principal") ? (
								<Form.Label className="text-danger text-sm-left mt-2">
									{csvError}
								</Form.Label>
							) : null}
						</Form.Group>

						<Form.Group controlId="exampleForm.ControlInput1">
							<Form.Label>Upload File *</Form.Label>
							<Form.Control
								type="file"
								name="fileUpload"
								onChange={e => onChangeFile(e)}
								value={formData.fileUpload}
							></Form.Control>
							{csvError.includes("file") ? (
								<Form.Label className="text-danger text-sm-left mt-2">
									{csvError}
								</Form.Label>
							) : null}
						</Form.Group>
					</Form>
					<p>
						Note: Marked * are the required fields. To import Leads into the
						system, please read the following instructions:
					</p>
					<ul className="text-muted">
						<li>Download the Sample File for import</li>
						<li>
							You may open the file using Microsoft Excel or any other
							spreadhseet program
						</li>
						<li>
							In the sample file, ensure the entries you wish to import are
							entered from the second(2nd) row onwards
						</li>
						<li>
							You will find two sample rows to get you started. You may delete
							these as you update your entries
						</li>
						<li>
							Please note that first row and its cell values are mandatory, and
							cannot be empty.
						</li>
						<li>Make sure the cells don't have any additional commas (,)</li>
						<li>
							Once the data is entered, save the file in the same CSV format.
						</li>
						<li>
							Duplicate records are those where an existing record exists with
							the Lead Name, Lead Type, Lead Date, Region & Campaign Name
						</li>
					</ul>
				</Modal.Body>
				<Modal.Footer>
					<div className="mr-auto">
						<CSVLink
							className="btn btn-light-warning ml-3 csv-btn font-weight-bolder"
							filename={"bulk_leads-sample.csv"}
							data={csvSampleData}
						>
							Sample CSV
						</CSVLink>
					</div>
					<Button
						variant="danger"
						onClick={showCSVModal}
						className="btn btn-light-danger font-weight-bolder mr-5"
					>
						Close
					</Button>

					<Button
						variant="primary"
						onClick={uploadCSV}
						className="btn btn-light-primary font-weight-bolder"
					>
						{csvStatus === Status.pending ? (
							<Spinner animation="border" />
						) : (
							"Upload"
						)}{" "}
					</Button>
				</Modal.Footer>
			</Modal>
			{/* {MODAL 3 ENDS HERE} */}
			{isSuccess && (
				<SnackbarComp
					open={isSuccess}
					message={message}
					variant={variant}
					onClose={e => setSuccess(false)}
				></SnackbarComp>
			)}
		</>
	);
}
